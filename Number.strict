has iterator
to Text
	5 to Text is "5"
	10.1 to Text is "10.1"
	for digits
		value to Character
digits Numbers
	1.digits is (1)
	123.digits is (1, 2, 3)
	let nextPart = (value / 10).Floor
	let currentDigit = value % 10
	nextPart is 0 ? currentDigit else nextPart.digits + currentDigit
to Character
	5 to Character is "5"
	constant canOnlyConvertSingleDigit = Error
	10 to Character is canOnlyConvertSingleDigit
	value is in Range(0, 10) ? Character(Character.zeroCharacter + value) else canOnlyConvertSingleDigit(value)
Floor Number
	1.Floor is 1
	2.4.Floor is 2
	value - value % 1
is(other) Boolean
	"Hey" is "Hey" is true
	"Hi" is "Hey" is false
	value is other
- Number
	-1 is not 1
	-value
and(other) Number
	2 and 6 is 6
	1 and 8 is 9
	9 and 1 is 9
	value
or(other) Number
	2 or 3 is 3
	16 or 8 is 16
	value
xor(other) Number
	1 xor 1 is 0
	3 xor 2 is 1
	value
is(other) Boolean
	1 is 1
	2 is not 3
	value is other
is not(other) Boolean
	1 is not 3
	2 is not 3
	value is not other
+(other) Number
	3 + 4 is 7
	value + other
-(other) Number
	-1 * 5 is -5
	3 - 2 is 1
	value - other
/(other) Number
	0 / 50 is 0
	1 / 20 is 0.05
	value / other
*(other) Number
	3 * 4 is 12
	value * other
%(other) Number
	100 % 10 is 1
	value % other
^(other) Number
	2 ^ 2 is 4
	value ^ other
>(other) Boolean
	0 > 0 is false
	3 > 1 is true
	value > other
>=(other) Boolean
	0 >= 0 is true
	value >= other
<(other) Boolean
	0 < 0 is false
	1 < 3 is true
	value < other
<=(other) Boolean
	0 <= 0 is true
	value <= other
Increment(amount = 1) Mutable(Number)
	Mutable(5).Increment.Decrement.Increment is 6
	Mutable(4).Increment(4) is 8
	value = value + amount
Decrement(amount = 1) Mutable(Number)
	Mutable(3).Decrement is 2
	Mutable(-2).Decrement(-7) is -9
	value = value - amount